<?php

function tvchat_views_data()
{
  $data = array();

  // The 'group' index will be used as a prefix in the UI for any of this
  // table's fields, sort criteria, etc. so it's easy to tell where they came
  // from.
  $data['content_type_tv_episode']['table']['group'] = t('TV Episode table');

  // Define this as a base table. In reality this is not very useful for
  // this table, as it isn't really a distinct object of its own, but
  // it makes a good example.
  $data['content_type_tv_episode']['table']['base'] = array(
    'field' => 'nid',
    'title' => t('TV episode table'),
    'help' => t("TV episode table contains related to TV show nodes."),
    'weight' => -10,
  );

  // This table references the {node} table.
  // This creates an 'implicit' relationship to the node table, so that when 'Node'
  // is the base table, the fields are automatically available.
  $data['content_type_tv_episode']['table']['join'] = array(
    // Index this array by the table name to which this table refers.
    // 'left_field' is the primary key in the referenced table.
    // 'field' is the foreign key in this table.
    'node' => array(
      'left_field' => 'nid',
      'field' => 'field_tvshow_nid',
    ),
  );

  // Next, describe each of the individual fields in this table to Views. For
  // each field, you may define what field, sort, argument, and/or filter
  // handlers it supports. This will determine where in the Views interface you
  // may use the field.

  // Node ID field.
  $data['content_type_tv_episode']['field_tvshow_nid'] = array(
    'title' => t('TV show content'),
    'help' => t('this field references a TV show node.'),
    // Because this is a foreign key to the {node} table. This allows us to
    // have, when the view is configured with this relationship, all the fields
    // for the related node available.
    'relationship' => array(
      'base' => 'node',
      'field' => 'field_tvshow_nid',
      'handler' => 'views_handler_relationship',
      'label' => t('TV show node'),
    ),
  );

  // Example numeric text field.
  $data['content_type_tv_episode']['field_episode_num_value'] = array(
    'title' => t('TV Episode number'),
    'help' => t('TV Episode number'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
     ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  return $data;
}
