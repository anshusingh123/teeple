<?php
/**
 *
 *  @file
 *  A PList server implementation for the services module.
 *
 */

define('BINARY_PLIST', 'application/plist');
define('XML_PLIST', 'application/plist+xml');
/**
 *  Implementation of hook_server_info().
 */
function plist_server_server_info() {
  return array(
    '#name' => 'PLIST',
    '#path' => 'plist'
  );
}


/**
 *  Implementation of hook_server_error().
 */
function plist_server_server_error($message) {
  return array("#error" => TRUE, "#message" => $message);
}
function plist_server_menu() {
  $items['admin/build/services/settings/plist'] = array(
    'title'             => 'PLIST Server',
    'description'       => 'Configure PLIST server settings.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('plist_server_admin_settings'),
    'access arguments'  => array('administer services'),
    'type'              => MENU_LOCAL_TASK,
    'weight'            => -10,
  );
  return $items;
}

function plist_server_admin_settings() {
  $form['plist_server_library'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Location for CFPropertyList'),
    '#default_value'  => variable_get('plist_server_library', './sites/all/libraries/cfpropertylist/CFPropertyList.php'),
    '#description'    => t('This is the location for the CFPropertyListFile required by PLIST Server'),
  );
    $form['plist_server_debug_mode'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Debug Mode'),
    '#default_value'  => variable_get('plist_server_debug_mode', 0),
    '#description'    => t('Turning this on (not recommended for production) will add watchdog statements for every request. Useful for development.'),
  );

  return system_settings_form($form);
}
/**
 *  Implementation of hook_server().
 */
function plist_server_server() {
  require_once './sites/all/libraries/cfpropertylist/CFPropertyList.php';
  $plist = new CFPropertyList();
  //Since this is connected Directly to DIOS we know we will always be reading binary.
  //If anyone needs XML support(you shouldnt, binary is 10 times faster) contact kyle@workhabit.com
  $plist->readBinaryStream(fopen('php://input','r'));
  $request = $plist->toArray();

  $methods = services_get_all();
  services_strip_hashes($methods);

  $args = array();
  foreach ($methods as $method) {
    if ($method['method'] == $request['method']) {
      $args = array();

      foreach ($method['args'] as $arg) {
        if (isset($request[$arg['name']])) {
          $args[] = $request[$arg['name']];
        }
        elseif ($arg['optional'] == 0) {
          return plist_server_encode_plist(array("#error" => TRUE, "#data" => array("Argument ". $arg['name'] ." not recieved")));
        }
      }
      if(variable_get('plist_server_debug_mode', 0)) {
        watchdog('plist_server', 'method: ' . $request['method'] . ', arguments passed: ' . print_r($request, 1));
      }
      $result = services_method_call($request['method'], $args);

      if (is_array($result) && $result['error'] === TRUE) {
        return plist_server_encode_plist(array('#error' => TRUE, '#data' => $result['message'], '#method' => $request, '#args' => $args));
      }
      
      return plist_server_encode_plist(array('#error' => FALSE, '#data' => $result, '#method' => $request ['method'], '#args' => $args));
    }
  }
  return plist_server_encode_plist(array('#error' => TRUE, '#data' => "Invalid method " . $request ['method'], '#args' => $args));
}

function plist_server_object_to_array($object) {
  if (!is_object($object) && !is_array($object)) {
    return $object;
  }
  if (is_object($object)) {
    $object = get_object_vars($object);
  }
  return array_map('plist_server_object_to_array', $object);
}
/**
 *  Helper function to create plist encoded strings.
 */
function plist_server_encode_plist($contents) {
  // PHP 5+.
  require_once './sites/all/libraries/cfpropertylist/CFPropertyList.php';
    $plist = new CFPropertyList();
    $td = new CFTypeDetector();  
    $guessedStructure = $td->toCFType(plist_server_object_to_array($contents));
    $plist->add($guessedStructure);
    $contents = $plist->toBinary();

  // No gzip support.
  if (headers_sent()) {
    return $contents;
  }
  
  // Check for gzip support.
  else {
    $accepted_encoding = $_SERVER['HTTP_ACCEPT_ENCODING'];
    if (strpos($accepted_encoding, 'x-gzip') !== FALSE) {
      $encoding = 'x-gzip';
    } elseif (strpos($accepted_encoding, 'gzip') !== FALSE) {
      $encoding = 'gzip';
    }
    
    // No gzip supported.
    else {
      return $contents;
    }
    
    // Add encoding with gzip.
    header('Content-Encoding: '. $encoding);
    $output = "\x1f\x8b\x08\x00\x00\x00\x00\x00";
    $size = strlen($contents);
    $contents = gzcompress($contents, 9);
    $contents = substr($contents, 0, $size);
    
    return $contents;
  }
}

